diff --git a/chukapoka/chukapoka/Feature/CreateGroup/View/CreateGroupView.swift b/chukapoka/chukapoka/Feature/CreateGroup/View/CreateGroupView.swift
index 884ba70..f9155e2 100644
--- a/chukapoka/chukapoka/Feature/CreateGroup/View/CreateGroupView.swift
+++ b/chukapoka/chukapoka/Feature/CreateGroup/View/CreateGroupView.swift
@@ -37,6 +37,9 @@ struct CreateGroupView: View {
                     InfoStep2View(viewModel: viewModel)
                 case .step3:
                     InfoStep3View(viewModel: viewModel)
+                case .step4:
+                    InfoStep3View(viewModel: viewModel)
+
                 }
             }
             .padding(.horizontal, 16)
diff --git a/chukapoka/chukapoka/Feature/CreateGroup/ViewModel/CreateGroupViewModel.swift b/chukapoka/chukapoka/Feature/CreateGroup/ViewModel/CreateGroupViewModel.swift
index ae65a4d..6801d72 100644
--- a/chukapoka/chukapoka/Feature/CreateGroup/ViewModel/CreateGroupViewModel.swift
+++ b/chukapoka/chukapoka/Feature/CreateGroup/ViewModel/CreateGroupViewModel.swift
@@ -9,7 +9,7 @@ import SwiftUI
 import SwiftData
 
 enum CreateGroupStep: Int, CaseIterable {
-    case step1, step2, step3
+    case step1, step2, step3, step4
 }
 
 @MainActor
@@ -155,14 +155,18 @@ final class CreateGroupViewModel: ObservableObject {
                 goToNextStep()
             }
         case .step2:
-            if validateStep2() {
+//            if validateStep2() {
                 goToNextStep()
-            }
+//            }
         case .step3:
-            if validateStep3() {
+//            if validateStep2() {
+                goToNextStep()
+//            }
+        case .step4:
+//            if validateStep3() {
                 let leader = saveGroupData(modelContext: modelContext)
                 coordinator.push(.loadingInfoDone(leader: leader))
-            }
+//            }
         }
     }
     
@@ -193,6 +197,9 @@ final class CreateGroupViewModel: ObservableObject {
             return isStep2Valid
         case .step3:
             return isStep3Valid
+        case .step4:
+            return isStep3Valid
+        // 수정필요 
         }
     }
     
diff --git a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/InvitationOCRView.swift b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/InvitationOCRView.swift
index 43f2599..2bd878d 100644
--- a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/InvitationOCRView.swift
+++ b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/InvitationOCRView.swift
@@ -2,7 +2,7 @@ import SwiftUI
 import PhotosUI
 
 struct InvitationOCRView: View {
-    @State private var currentStep: OCRStep = .photoPicker
+    @State private var currentStep: OCRStep = .step1
     @ObservedObject var ocrViewModel: OCRViewModel
     @StateObject private var viewModel: CreateGroupViewModel
     
@@ -12,39 +12,34 @@ struct InvitationOCRView: View {
     }
     
     enum OCRStep {
-        case photoPicker
-        case scan
-        case result
-        case info
+        case step1
+        case step2
+        case step3
+        case step4
     }
     
     var body: some View {
         VStack {
-            switch currentStep {
-            case .photoPicker:
+            switch viewModel.currentStep {
+            case .step1:
                 PhotoPickerView(viewModel: viewModel, ocrViewModel: ocrViewModel)
-            case .scan:
+            case .step2:
                 if let image = ocrViewModel.selectedImage {
-                    PhotoScanView(image: image) {
-                        currentStep = .result
-                    }
-                }
-            case .result:
-                OCRResultView(viewModel: viewModel, ocrViewModel: ocrViewModel, currentStep: $currentStep,
-                              onNext: {currentStep = .info}
-                )
-            case .info:
-                MyinfoView(viewModel: viewModel)
-            }
-        }
+                    PhotoScanView(image: image) {currentStep = .step1}}
+            case .step3:
+                OCRResultView(viewModel: viewModel, ocrViewModel: ocrViewModel, currentStep: $currentStep, onNext: {currentStep = .step4})
+            case .step4:
+                MyinfoView(viewModel: viewModel)}}
+                
+
         .onChange(of: ocrViewModel.selectedItem) { _, newItem in
             guard let newItem else { return }
             ocrViewModel.handleImageSelection(from: newItem) {
-                currentStep = .scan
+                currentStep = .step2
             }
         }
         .onChange(of: currentStep) { _, newStep in
-            if newStep == .photoPicker {
+            if newStep == .step1 {
                 ocrViewModel.reset()
             }
         }
diff --git a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step1/PhotoPickerView.swift b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step1/PhotoPickerView.swift
index 08d8593..a6e3db7 100644
--- a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step1/PhotoPickerView.swift
+++ b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step1/PhotoPickerView.swift
@@ -9,6 +9,7 @@ import SwiftUI
 import PhotosUI
 
 struct PhotoPickerView: View {
+    @Environment(\.modelContext) private var modelContext
     @ObservedObject var ocrViewModel: OCRViewModel
     @StateObject private var viewModel: CreateGroupViewModel
     @State private var isPickerPresented = false
@@ -47,6 +48,7 @@ struct PhotoPickerView: View {
                 style: .basic,
                 action: {
                     isPickerPresented = true
+                    viewModel.handleNext(modelContext: modelContext)
                 }
             )
         }
diff --git a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step3/OCRResultView.swift b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step3/OCRResultView.swift
index e37aec6..881e860 100644
--- a/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step3/OCRResultView.swift
+++ b/chukapoka/chukapoka/Feature/CreateGroupOCR/View/SubViews/Step3/OCRResultView.swift
@@ -33,7 +33,7 @@ struct OCRResultView: View {
             ZStack{
                 ScrollView {
                     VStack(alignment: .leading, spacing: 32) {
-                        Text("입력된 정보가 정확한지 \n 다시 한 번 확인해주세요")
+                        Text("입력된 정보가 정확한지 \n다시 한 번 확인해주세요")
                             .font(GSFont.title2)
                             .lineSpacing(12)
                             .foregroundColor(GSColor.black)
@@ -100,7 +100,7 @@ struct OCRResultView: View {
                 action: {
                     // TODO: SwiftData와 확인 필요
                     viewModel.handleNext(modelContext: modelContext)
-                    onNext()
+                    //onNext()
                 }
             )
             .padding(.horizontal, 16)
